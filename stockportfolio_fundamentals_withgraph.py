# -*- coding: utf-8 -*-
"""stockportfolio-Fundamentals-withgraph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bwPLerpzZ3nMAYqsceGe0jMxEIVxxh3g
"""

import os
import requests
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
import mplcursors
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from tabulate import tabulate
from IPython.display import display, Markdown

# Ensure output dir exists
os.makedirs("output", exist_ok=True)

# ---------- Data Functions ----------

def get_quarterly_fundamentals(slug):
    url = f"https://www.screener.in/company/{slug}/consolidated/"
    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        print(f"‚ùå Failed to fetch data for {slug}")
        return None

    soup = BeautifulSoup(response.content, "html.parser")
    table = soup.find("section", id="quarters")
    if not table:
        print(f"‚ö†Ô∏è Quarterly section not found for {slug}")
        return None

    headers = [th.text.strip() for th in table.find_all("th")]
    rows = table.find_all("tr")

    sales, net_profit, eps = [], [], []

    for row in rows:
        cols = [td.text.strip().replace(",", "") for td in row.find_all("td")]
        label = row.find("td").text.strip().lower() if row.find("td") else ""
        if "sales" in label and not sales:
            sales = cols
        elif "net profit" in label and not net_profit:
            net_profit = cols
        elif "eps" in label and not eps:
            eps = cols

    if not (sales and net_profit and eps):
        print(f"‚ö†Ô∏è Missing data for {slug.upper()}")
        return None

    df = pd.DataFrame({
        "Quarter": headers[1:],
        "Revenue (Cr)": sales[1:],
        "Net Profit (Cr)": net_profit[1:],
        "EPS": eps[1:]
    })

    return df

def get_stock_price(ticker):
    try:
        stock = yf.Ticker(ticker + ".NS")
        return stock.info['currentPrice']
    except:
        return "N/A"

# ---------- Plotting Functions ----------

def plot_and_save_fundamentals(df, ticker):
    df_plot = df.copy()
    df_plot[["Revenue (Cr)", "Net Profit (Cr)", "EPS"]] = df_plot[["Revenue (Cr)", "Net Profit (Cr)", "EPS"]].apply(pd.to_numeric, errors='coerce')

    x = range(len(df_plot["Quarter"]))
    bar_width = 0.35

    fig, ax1 = plt.subplots(figsize=(12, 6))

    # Bar plots for Revenue and Net Profit
    bars1 = ax1.bar([i - bar_width/2 for i in x], df_plot["Revenue (Cr)"], bar_width, label="Revenue (Cr)", color="#3498db", edgecolor="black")
    bars2 = ax1.bar([i + bar_width/2 for i in x], df_plot["Net Profit (Cr)"], bar_width, label="Net Profit (Cr)", color="#e74c3c", edgecolor="black")
    ax1.set_xlabel("Quarter")
    ax1.set_ylabel("‚Çπ in Crores")
    ax1.set_xticks(x)
    ax1.set_xticklabels(df_plot["Quarter"], rotation=45, fontsize=10)
    ax1.tick_params(axis='y', labelsize=10)
    ax1.grid(axis='y', linestyle='--', alpha=0.5)

    # EPS Line on right axis
    ax2 = ax1.twinx()
    eps_line, = ax2.plot(x, df_plot["EPS"], label="EPS", color="green", marker='o', linewidth=2)
    ax2.set_ylabel("EPS", fontsize=10)
    ax2.tick_params(axis='y', labelsize=10)

    # Combine Legends
    lines = [bars1, bars2, eps_line]
    labels = ["Revenue (Cr)", "Net Profit (Cr)", "EPS"]
    ax1.legend(lines, labels, loc="upper left", fontsize=10)

    plt.title(f"{ticker} ‚Äì Quarterly Fundamentals (with EPS)", fontsize=14)
    plt.tight_layout()

    # Enable tooltips
    mplcursors.cursor([bars1, bars2, eps_line], hover=True)

    plt.show()
    plt.savefig(f"output/{ticker}_fundamentals.png")
    plt.close()


def plot_and_save_ema_for_stock(ticker):
    stock = yf.Ticker(ticker + ".NS")
    hist = stock.history(period="1y")

    if hist.empty:
        print(f"‚ö†Ô∏è No historical data for {ticker}")
        return

    # Calculate EMAs
    for period in [9, 20, 50, 100, 200]:
        hist[f'EMA_{period}'] = hist['Close'].ewm(span=period, adjust=False).mean()

    plt.figure(figsize=(12, 6))
    plt.plot(hist['Close'], label='Close Price', color='black', linewidth=2)
    plt.plot(hist['EMA_9'], label='EMA 9', linestyle='--')
    plt.plot(hist['EMA_20'], label='EMA 20', linestyle='--')
    plt.plot(hist['EMA_50'], label='EMA 50')
    plt.plot(hist['EMA_100'], label='EMA 100')
    plt.plot(hist['EMA_200'], label='EMA 200')

    plt.title(f"{ticker} ‚Äì Close Price & EMA Trends (1 Year)", fontsize=14)
    plt.xlabel("Date")
    plt.ylabel("Price (‚Çπ)")
    plt.legend()
    plt.grid(True, linestyle='--', alpha=0.5)
    plt.tight_layout()
    mplcursors.cursor(hover=True)
    plt.show()
    plt.savefig(f"output/{ticker}_ema.png")
    plt.close()

def send_email(report_html):
    msg = MIMEMultipart()
    msg['Subject'] = "üìä Daily Stock Report"
    msg['From'] = os.getenv("EMAIL_FROM")
    msg['To'] = os.getenv("EMAIL_TO")
    msg.attach(MIMEText(report_html, 'html'))

    server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
    server.login(os.getenv("EMAIL_USER"), os.getenv("EMAIL_PASS"))
    server.send_message(msg)
    server.quit()

def build_report():
    html = ["<html><body><h1>üìà Daily Stock Report</h1>"]
    stock_map = {"tcs": "TCS", "reliance": "RELIANCE", "infy": "INFY"}

    for slug, ticker in stock_map.items():
        df = get_quarterly_fundamentals(slug)
        price = get_stock_price(ticker)
        stock_html = f"<h2>{ticker} ‚Äî ‚Çπ{price}</h2>"

        if df is not None:
            plot_and_save_fundamentals(df, ticker)
            plot_and_save_ema(ticker)
            stock_html += df.to_html(index=False)
            stock_html += f'<img src="{ticker}_fundamentals.png"><br>'
            stock_html += f'<img src="{ticker}_ema.png"><br>'

        html.append(stock_html)

    html.append("</body></html>")
    return "\n".join(html)

if __name__ == "__main__":
    report = build_report()
    send_email(report)
    
# ---------- Main Execution ----------

stock_map = {
    "tcs": "TCS",
    "reliance": "RELIANCE",
    "infy": "INFY"
}

for slug, ticker in stock_map.items():
    df = get_quarterly_fundamentals(slug)

    if df is not None:
        price = get_stock_price(ticker)
        display(Markdown(f"## üìà {ticker}"))
        display(Markdown(f"**üí∞ Current Price:** ‚Çπ{price}"))

        print("\nüìã Fundamental Table:")
        print(tabulate(df, headers="keys", tablefmt="grid", showindex=False))

        plot_and_save_fundamentals(df, ticker)
        plot_and_save_ema_for_stock(ticker)
